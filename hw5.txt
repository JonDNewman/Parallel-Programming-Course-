  #include <mpi.h>
  #include <stdio.h>
#define N 4  



  int id;             // Rank of current processor
  int nprocs;         // Number of processors

  int A[N][N]; 
  int B[N][N]; 
  int C[N][N]; //"global" arrays


void populate_matrix(int *a);
void nodecompute(int start, int size);

  int main(int argc, char *argv[])
  {
               MPI_Status status;
               MPI_Init(&argc, &argv);
               MPI_Comm_rank(MPI_COMM_WORLD, &id);
               MPI_Comm_size(MPI_COMM_WORLD, &nprocs);
               MPI_Barrier(MPI_COMM_WORLD);               
			  

               int p, chunk,  rmainder;

               chunk=N/nprocs;
               rmainder=N%nprocs;
			   
			   if(nprocs == 1)
			   {
                
                printf("Run with more than 1 processor \n");  
				fflush(stdout);
                MPI_Finalize();

               }
			   
			   if(id ==0)
			   {
              		
              		populate_matrix(A[0]); 
              		populate_matrix(B[0]);

              	/*	printf("A %d %d %d %d \n ", A[0][0], A[0][1],A[1][0],A[1][1]); 
                    printf("B %d %d %d %d \n ", B[0][0], B[0][1],B[1][0],B[1][1]);
                */
                    fflush(stdout);


			     for(p = 1; p < nprocs; p++)
				 {
//			    
				  
			      MPI_Send(A[p*chunk],N*chunk,MPI_INT,p, p,MPI_COMM_WORLD);
			      

				 }

				 MPI_Bcast(B[0],N*N,MPI_INT, 0, MPI_COMM_WORLD);
 				 	nodecompute(0, chunk);
 				 	//printf("C[0][0]= %d \n", C[0][0]);
 				 	if(N%nprocs!=0)
 				 		nodecompute(nprocs*chunk, rmainder);				 	

				
				 //receive result from process id != 0
				 for(p = 1; p < nprocs; p++)
				 {
//				  
				 	
	   		      MPI_Recv(C[p*chunk],N*chunk, MPI_INT, p, p, MPI_COMM_WORLD, &status);

				  // fflush(stdout);
				 }
				 printf("C[N-1][N-1]= %d\n",C[N-1][N-1] );
				 fflush(stdout);
			   }
			   else  //id != 0
			   {
//			     int recvInput[2];
			     MPI_Recv(A[id*chunk],N*chunk, MPI_INT, 0, id, MPI_COMM_WORLD, &status);
//			     MPI_Recv(recvInput,2, MPI_INT, 0,tag1, MPI_COMM_WORLD, &status);
			     MPI_Bcast(B[0],N*N,MPI_INT, 0, MPI_COMM_WORLD);
				 
				 printf("Process %d : received \n",id);

				 fflush(stdout);
				 
				 nodecompute(id*chunk, chunk);

				 //TODO: send the sum to process ID 0
//				 int sum = recvInput[0] + recvInput[1];
//				 MPI_Send(&sum,1,MPI_INT,0, tag2,MPI_COMM_WORLD);
				 MPI_Send(C[id*chunk], chunk*N, MPI_INT, 0, id, MPI_COMM_WORLD);
				 
			   }
			   
			   MPI_Finalize();
  }
  

void populate_matrix(int *a)
{
  int i,j;
  for(i=0;i<N;i++)
  {
  	  	for(j=0;j<N;j++)
  	  	{
  	  		*(a++)=1;
  	  		//printf("matrix[%d][%d]= %d\n", i, j, *(a-1));
  	  		// printf("processor %d here\n", id);
  	  	}
  	  	fflush(stdout);
  }
}

void nodecompute(int start, int size)
{
 int i,j,k;
 for(i=start; i<start+size; i++) 
  {
   for(j=0; j<N; j++)
   {
   	     C[i][j]=0;
   	
   	     for(k=0; k<N; k++)
   	     {	
   	           C[i][j]+=A[i][k]*B[k][j];
   	       		//printf("C[i][j]= %d p%d\n", C[i][j], id);
   	       		fflush(stdout);
   	     }
   	 }
   }
}  